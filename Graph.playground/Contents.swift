import UIKit

var str = "Hello, playground"

let graphAM = GraphAdjacencyMatrix<String>()
let a = graphAM.createNode(value: "A")
let b = graphAM.createNode(value: "B")
let c = graphAM.createNode(value: "C")
let d = graphAM.createNode(value: "D")
let e = graphAM.createNode(value: "E")
let f = graphAM.createNode(value: "F")
let g = graphAM.createNode(value: "G")
let h = graphAM.createNode(value: "H")
graphAM.connect(node: b, to: a, weight: 4)
graphAM.connect(node: c, to: a, weight: 2)
graphAM.connect(node: d, to: a, weight: 3)
graphAM.connect(node: e, to: b, weight: 5)
graphAM.connect(node: a, to: b, weight: 6)
graphAM.connect(node: a, to: c, weight: 1)
graphAM.connect(node: f, to: c, weight: 9)
graphAM.connect(node: g, to: c, weight: 2)
graphAM.connect(node: a, to: d, weight: 1)
graphAM.connect(node: b, to: e, weight: 1)
graphAM.connect(node: f, to: e, weight: 6)
graphAM.connect(node: h, to: e, weight: 4)
graphAM.connect(node: c, to: f, weight: 7)
graphAM.connect(node: e, to: f, weight: 3)
graphAM.connect(node: g, to: f, weight: 8)
graphAM.connect(node: c, to: g, weight: 2)
graphAM.connect(node: f, to: g, weight: 9)
graphAM.connect(node: e, to: h, weight: 1)

graphAM.bfsSearch(node: a)
graphAM.dfsSearch(node: a)
print(graphAM)
graphAM.dijkstra(from: a, destination: h)
